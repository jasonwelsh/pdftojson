#!/usr/bin/env python3
import pdfplumber
import pytesseract
from pdf2image import convert_from_path
import json
from typing import List, Dict
import re
import sys
import os
from pathlib import Path
import nltk
from nltk.tokenize import sent_tokenize
import logging

# Set Tesseract path for the bundled version
if getattr(sys, 'frozen', False):
    base_path = sys._MEIPASS
    pytesseract.pytesseract.tesseract_cmd = os.path.join(base_path, 'tesseract')

class PDFProcessor:
    def __init__(self, pdf_path: str):
        self.pdf_path = pdf_path
        self.setup_logging()

    def setup_logging(self):
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)

    def extract_text_with_ocr(self, image):
        try:
            text = pytesseract.image_to_string(image)
            return text.strip()
        except Exception as e:
            self.logger.error(f"OCR failed: {str(e)}")
            return ""

    def process_text(self, text: str) -> Dict:
        sentences = sent_tokenize(text)
        word_count = len(text.split())
        avg_sentence_length = word_count / len(sentences) if sentences else 0
        
        return {
            "full_text": text,
            "sentences": sentences,
            "metadata": {
                "word_count": word_count,
                "sentence_count": len(sentences),
                "avg_sentence_length": round(avg_sentence_length, 2),
                "has_numbers": bool(re.search(r'\d', text)),
                "has_special_chars": bool(re.search(r'[^a-zA-Z0-9\s]', text))
            }
        }

    def extract_pdf_data(self) -> List[Dict]:
        structured_data = []
        
        try:
            with pdfplumber.open(self.pdf_path) as pdf:
                for page_num, page in enumerate(pdf.pages, 1):
                    text = page.extract_text()
                    
                    if not text or text.isspace():
                        self.logger.info(f"Using OCR for page {page_num}")
                        images = convert_from_path(self.pdf_path, first_page=page_num, last_page=page_num)
                        text = self.extract_text_with_ocr(images[0])
                    
                    if text.strip():
                        processed_data = self.process_text(text)
                        page_data = {
                            "page_number": page_num,
                            "content": processed_data["full_text"],
                            "sentences": processed_data["sentences"],
                            "metadata": {
                                **processed_data["metadata"],
                                "ocr_used": not bool(page.extract_text().strip())
                            }
                        }
                        structured_data.append(page_data)
                    
                    self.logger.info(f"Processed page {page_num}")
            
            return structured_data
            
        except Exception as e:
            self.logger.error(f"Error processing PDF: {str(e)}")
            raise

def save_to_json(data: List[Dict], output_path: str) -> None:
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def main():
    if len(sys.argv) != 3:
        print("Usage: pdftojson <pdf_file> <json_output_file>")
        print("Example: pdftojson input.pdf output.json")
        sys.exit(1)
    
    pdf_path = sys.argv[1]
    json_output_path = sys.argv[2]
    
    try:
        print(f"Processing PDF: {pdf_path}")
        processor = PDFProcessor(pdf_path)
        extracted_data = processor.extract_pdf_data()
        
        save_to_json(extracted_data, json_output_path)
        print(f"Successfully saved JSON data to: {json_output_path}")
        
        print(f"\nSummary:")
        print(f"Total pages processed: {len(extracted_data)}")
        total_words = sum(page['metadata']['word_count'] for page in extracted_data)
        print(f"Total words extracted: {total_words}")
        ocr_pages = sum(1 for page in extracted_data if page['metadata']['ocr_used'])
        print(f"Pages requiring OCR: {ocr_pages}")
        
    except FileNotFoundError:
        print(f"Error: The PDF file '{pdf_path}' was not found.")
        sys.exit(1)
    except Exception as e:
        print(f"Error processing PDF: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()